<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Website | Lwruan</title><link>/category/website/</link><atom:link href="/category/website/index.xml" rel="self" type="application/rss+xml"/><description>Website</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 May 2021 00:00:00 +0000</lastBuildDate><image><url>/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url><title>Website</title><link>/category/website/</link></image><item><title>Migration to Hugo</title><link>/post/migration-to-hugo/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>/post/migration-to-hugo/</guid><description>&lt;h2 id="why-hugo">Why Hugo?&lt;/h2>
&lt;p>The main reason I switch to Hugo is that I find many researchers use &lt;a href="https://wowchemy.com" target="_blank" rel="noopener">Hugo Academic&lt;/a>(now named as Wowchemy) to build their website rather than Jekyll. After finishing the migration to Hugo, I understand why. Essentially Hugo and Jekyll are both static content generators, but Hugo Academic has more good built-in features like publication pages, project pages, and presentation pages. The configuration for Hugo is also much easier since I don&amp;rsquo;t have to deal with those extensions. Although Hugo might not be as flexible as Jekyll, it can cover most of my demands without great effort.&lt;/p>
&lt;h2 id="set-up">Set Up&lt;/h2>
&lt;p>Hugo Academic does not work like other Hugo themes, so Hugo&amp;rsquo;s tutorial is not adequate. Wowchemy offers a tutorial on its website, but it&amp;rsquo;s based on its online platform using Netlify. To keep things simple, the best way to build a website is to directly clone their Github repository &lt;a href="https://github.com/wowchemy/starter-academic" target="_blank" rel="noopener">starter-academic&lt;/a> and put it in your &lt;code>&amp;lt;user-name&amp;gt;.github.io&lt;/code> repository. To preview the website, go to the repository&amp;rsquo;s folder and run &lt;code>hugo server&lt;/code>. Running &lt;code>hugo&lt;/code> can generate the website under the &lt;code>public&lt;/code> folder, this behavior can be changed using &lt;code>--publishDir&lt;/code>.&lt;/p>
&lt;p>I use a &lt;a href="https://github.com/features/actions" target="_blank" rel="noopener">Github Action&lt;/a> to publish my website following the instruction from &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener">Hugo Tutorial&lt;/a>. Whenever I commit to &lt;code>master&lt;/code> branch, the action can be automatically triggered, running commands to publish the website to &lt;code>gh-pages&lt;/code> branch. The action&amp;rsquo;s configuration file is in &lt;code>.github/workflows/gh-pages.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-yml">name: github pages
on:
push:
branches:
- master # Set a branch to deploy
jobs:
deploy:
runs-on: ubuntu-18.04
steps:
- uses: actions/checkout@v2
with:
submodules: true # Fetch Hugo themes (true OR recursive)
fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: '0.82.1'
extended: true
- name: Build
run: hugo --minify
- name: Deploy
uses: peaceiris/actions-gh-pages@v3
with:
github_token: ${{ secrets.GITHUB_TOKEN }}
publish_branch: gh-pages
cname: lwruan.com
&lt;/code>&lt;/pre>
&lt;p>This workflow use &lt;a href="https://github.com/peaceiris/actions-hugo" target="_blank" rel="noopener">actions-hugo&lt;/a> and &lt;a href="https://github.com/peaceiris/actions-gh-pages" target="_blank" rel="noopener">actions-gh-pages&lt;/a> from &lt;a href="https://github.com/peaceiris" target="_blank" rel="noopener">Shohei Ueda&lt;/a>, it does nothing more than using Hugo to generate the website, pushing the files to &lt;code>gh-pages&lt;/code> branch, and adding &lt;code>CNAME&lt;/code> file in the directory. This process only takes few seconds, after that the files in &lt;code>gh-pages&lt;/code> branch are updated. The last thing is to tell Github to find the &lt;code>index.html&lt;/code> in &lt;code>gh-pages&lt;/code> branch, this can be done in repository&amp;rsquo;s settings.&lt;/p></description></item><item><title>Blog Setup Day3</title><link>/post/blog-setup-day3/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>/post/blog-setup-day3/</guid><description>&lt;h2 id="revealjs">Reveal.js&lt;/h2>
&lt;p>&lt;a href="https://revealjs.com/" target="_blank" rel="noopener">Reveal.js&lt;/a> is a powerful tool to build slides on web using &lt;code>HTML&lt;/code> or &lt;code>Markdown&lt;/code>. To use it locally is very easy, just download the source code on github and open &lt;code>demo.html&lt;/code> you can see the result in your browser. Using it on web page is almost the same, put &lt;code>reveal.js&lt;/code> in &lt;code>/assets/reveal.js&lt;/code> and modify the path in &lt;code>demo.html&lt;/code> to the folder in &lt;code>assets&lt;/code>, then everything works.&lt;br>
&lt;code>Reveal.js&lt;/code> has natural support of &lt;a href="https://revealjs.com/markdown/" target="_blank" rel="noopener">&lt;code>Markdown&lt;/code>&lt;/a>, which makes it possible for us to integrate it into our &lt;code>jekyll&lt;/code> based web page.&lt;/p>
&lt;h2 id="online-solutions">Online Solutions&lt;/h2>
&lt;p>There are already some solutions to integrate &lt;code>reveal.js&lt;/code> in &lt;code>jekyll&lt;/code>, like &lt;a href="https://github.com/dploeger/jekyll-revealjs" target="_blank" rel="noopener">jekyll-revealjs&lt;/a>, &lt;a href="https://github.com/tasmo/reveal-jekyll" target="_blank" rel="noopener">reveal-jekyll&lt;/a>. Most of them use costum plugins to porcess raw &lt;code>html&lt;/code> files generated by &lt;code>jekyll&lt;/code> to &lt;code>reveal.js&lt;/code>&amp;rsquo;s style, this can cause several confusions:&lt;/p>
&lt;ul>
&lt;li>many previous solutions require you to write every slide in seperate file&lt;/li>
&lt;li>&lt;code>jekyll&lt;/code> defaultly generates &lt;code>html&lt;/code> file for every post using its own parser, this may cause images, math equations and codes incompatible with &lt;code>reveal.js&lt;/code>&lt;/li>
&lt;li>for the same reason, it&amp;rsquo;s also inconvinent to directly put &lt;code>md&lt;/code> code into &lt;code>html&lt;/code> letting &lt;code>reveal.js&lt;/code> to process markdown using &lt;code>marked&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Spending a lot of time sereaching and testing, I decided to turn to offline solutions.&lt;/p>
&lt;h2 id="pandoc">Pandoc!&lt;/h2>
&lt;p>&lt;a href="https://pandoc.org/" target="_blank" rel="noopener">Pandoc&lt;/a> is extremely useful to convert files from one format into another, not surprisingly it supports &lt;code>reveal.js&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-bash">pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/
&lt;/code>&lt;/pre>
&lt;p>&lt;code>revealjs-url&lt;/code> can be local directory like &lt;code>/assets/reveal.js&lt;/code>, you can also use other command to specify styles and templates. Notice that the version of your &lt;code>pandoc&lt;/code> and &lt;code>reveal.js&lt;/code> must be compatible, see more information on &lt;a href="https://github.com/jgm/pandoc/wiki/Using-pandoc-to-produce-reveal.js-slides" target="_blank" rel="noopener">this page&lt;/a>.&lt;/p>
&lt;h2 id="set-up-pipeline">Set Up Pipeline&lt;/h2>
&lt;p>The first thing to do is to find a place to store markdown files and generated html files. I set up two directories &lt;code>_slides&lt;/code> and &lt;code>_slides-md&lt;/code> under home directory, then I can create a &lt;code>ruby&lt;/code> script &lt;code>generate.rb&lt;/code> to generate those slides:&lt;/p>
&lt;pre>&lt;code class="language-ruby">#!/usr/bin/ruby
require 'find'
puts &amp;quot;Generate all slides&amp;quot;
Find.find('_slides-md') do |path|
if path != '_slides-md'
output_path = path.sub(&amp;quot;_slides-md/&amp;quot;, &amp;quot;_slides/&amp;quot;).sub(&amp;quot;.md&amp;quot;, &amp;quot;.html&amp;quot;)
puts &amp;quot;source file: &amp;quot; + path
puts &amp;quot;output file: &amp;quot; + output_path
system &amp;quot;pandoc -t revealjs -s -o &amp;quot; + output_path + &amp;quot; &amp;quot; + path + &amp;quot; -V revealjs-url=/assets/reveal.js&amp;quot;
end
end
puts &amp;quot;Start server&amp;quot;
exec &amp;quot;bundle exec jekyll serve --draft&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>The good thing is that now I can use &lt;code>ruby generate.rb&lt;/code> to replace &lt;code>bundle exec jekyll serve&lt;/code> and care nothing more.&lt;br>
Next thing is permalinks. Add &lt;code>_slides&lt;/code> to &lt;code>_config.yml&lt;/code>&amp;rsquo;s inclusion, then all the slides can be accessed in &lt;code>&amp;lt;home-url&amp;gt;/_slides/&amp;lt;name&amp;gt;.html&lt;/code>. I also want an archive page for all slides like &lt;code>BLOG&lt;/code> in the navigator, this can be done using &lt;code>collection&lt;/code> in &lt;code>jekyll&lt;/code>. Noticing that directly set up a collection for &lt;code>_slides&lt;/code> it won&amp;rsquo;t work, because we have a bunch of &lt;code>HTML&lt;/code> files there rather than &lt;code>Markdown&lt;/code> files like those in &lt;code>_posts&lt;/code>. To let this work, we can set a collection for &lt;code>_slides-md&lt;/code>, then create a navigation page using &lt;code>collection.html&lt;/code> in &lt;code>_layouts&lt;/code>. At last, the href of each slides need to be reset to &lt;code>_slides&lt;/code> rather than &lt;code>[[post.url]]&lt;/code>, other wise it can only lead to the &lt;code>jekyll&lt;/code>-rendered post page. My layout for this page is also listed here:&lt;/p>
&lt;pre>&lt;code class="language-html">---
layout: archive
---
&amp;lt;!--[ ] for { }--&amp;gt;
[[ content ]]
[% assign entries_layout = page.entries_layout | default: 'list' %]
&amp;lt;div class=&amp;quot;entries-[[ entries_layout ]]&amp;quot;&amp;gt;
[% assign entries = site[page.collection] %]
[% assign entries = entries | sort: 'title' %]
[%- for post in entries -%]
[%- unless post.hidden -%]
[% if post.header.teaser %]
[% capture teaser %][[ post.header.teaser ]][% endcapture %]
[% else %]
[% assign teaser = site.teaser %]
[% endif %]
[% if post.id %]
[% assign title = post.title | markdownify | remove: &amp;quot;&amp;lt;p&amp;gt;&amp;quot; | remove: &amp;quot;&amp;lt;/p&amp;gt;&amp;quot; %]
[% else %]
[% assign title = post.title %]
[% endif %]
&amp;lt;div class=&amp;quot;[[ include.type | default: 'list' ]]__item&amp;quot;&amp;gt;
&amp;lt;article class=&amp;quot;archive__item&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/CreativeWork&amp;quot;&amp;gt;
[% if include.type == &amp;quot;grid&amp;quot; and teaser %]
&amp;lt;div class=&amp;quot;archive__item-teaser&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;[[ teaser | relative_url ]]&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
[% endif %]
&amp;lt;h2 class=&amp;quot;archive__item-title no_toc&amp;quot; itemprop=&amp;quot;headline&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;/_slides/[[ post.url | remove:'/slides/' ]].html&amp;quot; rel=&amp;quot;permalink&amp;quot;&amp;gt;[[ title ]]&amp;lt;/a&amp;gt;
&amp;lt;/h2&amp;gt;
[% include post__meta.html type=include.type %]
[% if post.excerpt %]&amp;lt;p class=&amp;quot;archive__item-excerpt&amp;quot; itemprop=&amp;quot;description&amp;quot;&amp;gt;[[ post.excerpt | markdownify | strip_html | truncate: 160 ]]&amp;lt;/p&amp;gt;[% endif %]
&amp;lt;/article&amp;gt;
&amp;lt;/div&amp;gt;
[%- endunless -%]
[%- endfor -%]
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Blog Setup Day2</title><link>/post/blog-setup-day2/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>/post/blog-setup-day2/</guid><description>&lt;h2 id="image-and-math-support">Image and Math Support&lt;/h2>
&lt;p>One can easily import image in &lt;code>Markdown&lt;/code> using &lt;code>![image name](image path)&lt;/code>, another way of doing this is to use &lt;code>html&lt;/code> syntax:&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;pic/image.png&amp;quot; alt=&amp;quot;Image&amp;quot; style=&amp;quot;zoom:%;&amp;quot; /&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>In this way you can change the position and size of the image. From official guide, it&amp;rsquo;s recommanded to store all the images in &lt;code>asssets/images/&lt;/code>, and also name the image like your post:&lt;code>YY-MM-DD-title.jpg&lt;/code>.(html style of image is not originally supported in jekyll, so you might need some trick to set the right path for image)&lt;/p>
&lt;p>To add math support the most common choice is &lt;a href="https://www.mathjax.org/" target="_blank" rel="noopener">mathjax&lt;/a>. Just add these lines to the &lt;code>default.html&lt;/code> layout before &lt;code>&amp;lt;head&amp;gt;&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; async
src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>The config here means you can use &lt;code>$...$&lt;/code> or &lt;code>\\(...\\)&lt;/code> for inline math because &lt;code>$...$&lt;/code> is not naturally support by &lt;code>mathjax&lt;/code>.&lt;/p>
&lt;h2 id="custom-page-style">Custom Page Style&lt;/h2>
&lt;p>To change some of the default style like fonts, colors, margins one needs to modify some of the settings in &lt;code>layout&lt;/code> and &lt;code>css&lt;/code>. For me, I don&amp;rsquo;t like the footer to show up in every page, so I go to &lt;code>_includes/footer.html&lt;/code> and comment everything in it, then the footer disappear. I also don&amp;rsquo;t like the title links have grey color, so I go to &lt;code>_sass/minimal-mistakes/_variables.scss&lt;/code> to change the &lt;code>link-color&lt;/code> in it. Here I won&amp;rsquo;t explain every configuration&amp;rsquo;s position to you, but show how I find them.&lt;/p>
&lt;p>Basically every style configuration start from &lt;code>_layouts&lt;/code>, every layout file might include components in &lt;code>_includes&lt;/code>, the file in &lt;code>_includes&lt;/code> tells what to show in every components, and the style of the components are in &lt;code>_sass&lt;/code>. If you want to change someting, first you can use the consoler of your web browser (F12 for chrome and firefox) to find the name of the component you want to modify, then search through files in those folders using &lt;code>grep -R&lt;/code> to locate the variables you want. One thing to notice is that most colors and fonts are defined in &lt;code>_sass/minimal-mistakes/_variables.scss&lt;/code>.&lt;/p>
&lt;h2 id="drafts">Drafts&lt;/h2>
&lt;p>Jekyll provide draft function to write post. Put the draft post in &lt;code>_drafts&lt;/code>, then use &lt;code>bundle exec jekyll serve --draft&lt;/code>, the posts in &lt;code>_drafts&lt;/code> will be shown using the day time you run the command.&lt;/p></description></item><item><title>Blog Setup Day1</title><link>/post/blog-setup-day1/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>/post/blog-setup-day1/</guid><description>&lt;h2 id="basic-tools">Basic Tools&lt;/h2>
&lt;p>I use &lt;a href="https://jekyllrb.com" target="_blank" rel="noopener">jekyll&lt;/a> and github page to setup my blog, there are many online tutorials on how to build this thing up already, but you may come cross some detail problems as I do. The basic steps are like this:&lt;/p>
&lt;ul>
&lt;li>install &lt;code>ruby&lt;/code>, &lt;code>bundler&lt;/code> and &lt;code>jekyll&lt;/code>&lt;/li>
&lt;li>create a github page repository &amp;lt;user name&amp;gt;.github.io&lt;/li>
&lt;li>fork a theme repository&amp;rsquo;s master branch, here I use &lt;a href="https://github.com/mmistakes/minimal-mistakes" target="_blank" rel="noopener">minimal-mistakes&lt;/a> and copy everything to your github repository (or use theme repository as template when create your github repository)&lt;/li>
&lt;li>run &lt;code>bundle install&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The first problem is that you need to config &lt;code>Gemfile&lt;/code> before you can see your web page, notice that you should config this in &lt;code>remote theme&lt;/code> way. Then the second error may occur that &lt;a href="https://github.com/github/pages-gem/issues/577" target="_blank" rel="noopener">the version of &lt;code>github-pages&lt;/code> is not compatible with the latest version of &lt;code>jekyll&lt;/code>&lt;/a>. I solve these problems by config my &lt;code>Gemfile&lt;/code> in the following way.&lt;/p>
&lt;pre>&lt;code>source &amp;quot;https://rubygems.org&amp;quot;
gem &amp;quot;jekyll&amp;quot;, &amp;quot;~&amp;gt; 3.8.7&amp;quot;
# gem &amp;quot;minimal-mistakes-jekyll&amp;quot;
gem &amp;quot;github-pages&amp;quot;, &amp;quot;~&amp;gt; 206&amp;quot;, group: :jekyll_plugins
gem &amp;quot;wdm&amp;quot;, &amp;quot;~&amp;gt; 0.1.0&amp;quot; if Gem.win_platform?
group :jekyll_plugins do
gem &amp;quot;jekyll-include-cache&amp;quot;
gem &amp;quot;faraday&amp;quot;, &amp;quot;~&amp;gt; 0.17.3&amp;quot;
gem &amp;quot;jekyll-feed&amp;quot;, &amp;quot;~&amp;gt; 0.13.0&amp;quot;
end
&lt;/code>&lt;/pre>
&lt;p>Now you can see your web page by running &lt;code>bundle exec jekyll serve&lt;/code>, and also see the remote site after &lt;code>git push&lt;/code>.&lt;/p>
&lt;h2 id="how-jekyll-generate-page">How Jekyll Generate Page&lt;/h2>
&lt;p>The master branch of &lt;code>minimal-mistakes&lt;/code> is quite empty, but it&amp;rsquo;s a good start point. First you should look through &lt;code>_config.yml&lt;/code>, this is the main configuration file we need to edit. The &lt;a href="https://jekyllrb.com/docs/step-by-step/01-setup/" target="_blank" rel="noopener">Step by Step Tutorial&lt;/a> is a good document to understand what&amp;rsquo;s going on. Basically the content of web page can be written in &lt;code>markdown&lt;/code> or &lt;code>html&lt;/code>, the format of the page is specified by &lt;code>Front Matter&lt;/code>:&lt;/p>
&lt;pre>&lt;code>---
title: &amp;quot;FooBar&amp;quot;
layout: default
categories:
---
&lt;/code>&lt;/pre>
&lt;p>Jekyll can read from this metadata and compile the final web page. All the layout files are in &lt;code>_layouts&lt;/code> directory, like &lt;code>default.html&lt;/code>, open it you can see it&amp;rsquo;s &lt;code>html&lt;/code> with some &lt;code>jekyll&lt;/code> syntax.
The best example of this pipeline is &lt;code>index.html&lt;/code> in home directory:&lt;/p>
&lt;pre>&lt;code>---
layout: home
author_profile: true
---
&lt;/code>&lt;/pre>
&lt;p>&lt;code>home&lt;/code> means it uses &lt;code>home.html&lt;/code> in &lt;code>_layouts&lt;/code> as template, &lt;code>author_profile: true&lt;/code> means it includes your profile in home page.&lt;/p>
&lt;p>Now let&amp;rsquo;s write our first post. create a &lt;code>_posts&lt;/code> directory, add a markdown file in this format(required by jekyll)&lt;code>YY-MM-DD-title.md&lt;/code> in it, write front matter and your content, reopen the server you should see your post in the home page, if you change the layout to any layout in &lt;code>_layouts&lt;/code>, you should also see the change.&lt;/p>
&lt;p>It&amp;rsquo;s not a good idea to specify layout in every post, so &lt;code>jekyll&lt;/code> provides a default configuration for different files in &lt;code>_config.yml&lt;/code>. Go to this file and scroll down you can see config like this:&lt;/p>
&lt;pre>&lt;code>defaults:
# _posts
- scope:
path: &amp;quot;&amp;quot;
type: posts
values:
layout: single
author_profile: true
read_time: true
comments: true
share: true
related: true
&lt;/code>&lt;/pre>
&lt;p>The config here means all the files in &lt;code>_posts&lt;/code> will add these &lt;code>values&lt;/code> in its front matter, so actually you can just write &lt;code>title&lt;/code> and &lt;code>author&lt;/code> in every post, &lt;code>jekyll&lt;/code> will automatically generate page using &lt;code>single&lt;/code> layout. If you want to do something different, you can also add &lt;code>layout:&lt;/code> in front matter, it will override the settings in &lt;code>_config.yml&lt;/code>.&lt;/p>
&lt;h2 id="how-jekyll-organize-pages">How Jekyll Organize Pages&lt;/h2>
&lt;p>Most of the time besides writting posts, we also want a page to display all the posts in different categories, this requires us to write an &lt;code>archive&lt;/code> page. Pages like archive, curriculum are different from post, they don&amp;rsquo;t need to update so much. We can put them just in home directory like &lt;code>index.html&lt;/code>, I prefer to put them in &lt;code>_pages&lt;/code>. To do so, we need to include &lt;code>_pages&lt;/code> in &lt;code>_config.yml&lt;/code> (already included in &lt;code>minimal-mistakes&lt;/code>).&lt;/p>
&lt;p>Apart from that, we may also want to navigate through these pages in title bar, this configuration is stored in &lt;code>_data/navigation.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code>main:
- title: &amp;quot;Quick-Start Guide&amp;quot;
url: https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide /
&lt;/code>&lt;/pre>
&lt;p>This config is also straight forward, the problem is how jekyll determine the url for pages.&lt;/p>
&lt;p>It turns out jekyll uses &lt;code>permalink&lt;/code> to config page&amp;rsquo;s position. Suppose you add &lt;code>curriculum.md&lt;/code> in &lt;code>_pages&lt;/code> like this:&lt;/p>
&lt;pre>&lt;code>---
title: &amp;quot;Curriculum&amp;quot;
permalink: /curriculum/
layout: single
---
Something about yourself.
&lt;/code>&lt;/pre>
&lt;p>then this page will show up in &lt;code>\&amp;lt;user name\&amp;gt;.github.io/curriculum&lt;/code>, to link this url to title bar, you can just change the &lt;code>url&lt;/code>&amp;rsquo;s value in &lt;code>navigation.yml&lt;/code> to &lt;code>/curriculum/&lt;/code>.&lt;/p>
&lt;p>For all the posts, jekyll also provide default settings for them. In &lt;code>_config.yml&lt;/code>, there is a line for &lt;code>permalink&lt;/code>. If it&amp;rsquo;s &lt;code>/:categories/:title.html&lt;/code>, it means the post you write will be stored in &lt;code>\&amp;lt;user name\&amp;gt;.github.io/\&amp;lt;post's categority\&amp;gt;/title.html&lt;/code>, you can see &lt;a href="https://jekyllrb.com/docs/permalinks/" target="_blank" rel="noopener">this document&lt;/a> for more information on how to change this.&lt;/p></description></item></channel></rss>